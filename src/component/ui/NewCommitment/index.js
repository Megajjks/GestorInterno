import React, { useState, Fragment } from "react";
import { useHistory } from "react-router-dom";
import {
  WrapperContainer,
  Title,
  Information,
  Url,
  Form,
  WrapperField,
  Field,
  Label,
  Input,
  InputRadio,
  LabelFile,
  WrapperInputRadio,
  Select,
  TextArea,
  Btn,
  TxtRequired,
  WrapperTextInput,
  WrapperTextArea,
  SpanText,
  WrapperTextSuggestion,
  WrapperSuggestion,
  WrapperSpan1,
  WrapperSpan2,
  WrapperSpan3,
  WrapperSpan4,
  WrapperSpan5,
} from "./styled";
import Snackbar from "@material-ui/core/Snackbar";
import MuiAlert from "@material-ui/lab/Alert";
import BtnSend from "../GeneralButton";
import api from "../../../helpers/api";
import { states, sector, socialNetworks, area } from "../../../helpers/index";

const addStyle = (id1, id2, id3, id4, id5) => {
  document.getElementById(`${id1}`).style.display = "block";
  document.getElementById(`${id2}`).style.display = "none";
  document.getElementById(`${id3}`).style.display = "none";
  document.getElementById(`${id4}`).style.display = "none";
  document.getElementById(`${id5}`).style.display = "none";
};

const removeStyle = (id1, id2, id3, id4, id5) => {
  document.getElementById(`${id1}`).style.display = "none";
  document.getElementById(`${id2}`).style.display = "none";
  document.getElementById(`${id3}`).style.display = "none";
  document.getElementById(`${id4}`).style.display = "none";
  document.getElementById(`${id5}`).style.display = "none";
};

const NewCommitment = () => {
  const [commitment, setCommitment] = useState({
    firstName: "",
    lastName: "",
    organization: "",
    sector: "",
    city: "",
    state: "",
    position: "",
    email: "",
    phone: "",
    logo: "",
    img: "",
    categoryId: 0,
    area: "",
    question1: "",
    question2: "",
    question3: "",
    question4: "",
    question5: "",
    question6: "",
    question8: null,
    question7: "",
    question9: "",
    question10: "",
    question11: "",
    question12: "",
    sendEmails: false,
  });

  const [question8Add, setQuestion8Add] = useState({
    question8_1: false,
    question8_2: false,
    question8_3: false,
    question8_4: false,
    question8_5: false,
    question8_6: false,
  });

  const handleOnChangeQuestion8 = (e) => {
    setQuestion8Add({
      ...question8Add,
      [e.target.name]: e.target.value,
    });
  };

  const history = useHistory();

  const [isLoader, setIsLoader] = useState(false);
  const [error, setError] = useState({
    status: false,
    message: "",
  });

  const handleClose = (event, reason) => {
    if (reason === "clickaway") {
      return;
    }

    setError({
      ...error,
      status: false,
    });
  };

  const handleOnChange = (e) => {
    setCommitment({
      ...commitment,
      [e.target.name]: e.target.value,
    });
  };

  const [img, setImg] = useState([]);

  const [logo, setLogo] = useState([]);

  const onChangeHandlerLogo = (e) => {
    console.log("Logo");
    console.log(e.target.files[0]);
    setLogo({
      selectedFile: e.target.files[0],
    });
    setCommitment({
      ...commitment,
      [e.target.name]: e.target.files[0].name,
    });
  };

  const onChangeHandlerImg = (e) => {
    console.log("Img");
    console.log(e.target.files[0]);
    setImg({
      selectedFile: e.target.files[0],
    });
    setCommitment({
      ...commitment,
      [e.target.name]: e.target.files[0].name,
    });
  };

  function Alert(props) {
    return <MuiAlert elevation={6} variant="filled" {...props} />;
  }

  const validateData = (e) => {
    e.preventDefault();
    if (
      commitment.firstName === "" ||
      commitment.lastName === "" ||
      commitment.organization === "" ||
      commitment.sector === "" ||
      commitment.area === "" ||
      commitment.city === "" ||
      commitment.state === "" ||
      commitment.position === "" ||
      commitment.email === "" ||
      !/^\w+([\.\+\-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,4})+$/.test(
        commitment.email
      ) ||
      commitment.phone === "" ||
      commitment.question1 === "" ||
      commitment.question2 === "" ||
      commitment.question3 === "" ||
      commitment.question4 === "" ||
      commitment.question5 === "" ||
      commitment.question6 === "" ||
      commitment.question7 === "" ||
      commitment.question9 === "" ||
      commitment.question10 === "" ||
      commitment.question11 === "" ||
      commitment.question12 === "" ||
      commitment.agree === false
    ) {
      setError({
        status: true,
        message: "Â¡Ups!, parace que tienes campos sin rellenar.",
      });
    } else {
      setError({
        status: false,
        message: "",
      });
      sendData();
    }
  };

  const sendData = async () => {
    setIsLoader(true);
    try {
      let formdata = new FormData();
      setCommitment({
        ...commitment,
        question8: question8Add,
      });
      formdata.append("firstName", commitment.firstName);
      formdata.append("lastName", commitment.lastName);
      formdata.append("organization", commitment.organization);
      formdata.append("sector", commitment.sector);
      formdata.append("city", commitment.city);
      formdata.append("state", commitment.state);
      formdata.append("position", commitment.position);
      formdata.append("phone", commitment.phone);
      formdata.append("email", commitment.email);
      formdata.append("categoryId", 0);
      formdata.append("img", img.selectedFile);
      formdata.append("logo", logo.selectedFile);
      formdata.append("area", commitment.area);
      formdata.append("question1", commitment.question1);
      formdata.append("question2", commitment.question2);
      formdata.append("question3", commitment.question3);
      formdata.append("question4", commitment.question4);
      formdata.append("question5", commitment.question5);
      formdata.append("question6", commitment.question6);
      formdata.append("question7", commitment.question7);
      //formdata.append("question8", commitment.question8);
      formdata.append("question9", commitment.question9);
      formdata.append("question10", commitment.question10);
      formdata.append("question11", commitment.question11);
      formdata.append("question12", commitment.question12);
      formdata.append("sendEmails", commitment.sendEmails);
      const response = await api.post("/commitment", formdata);
      console.log("ðŸ‘‰ Returned data:", response);
      setIsLoader(false);
      setError({
        status: false,
        message: "",
      });
      //redirection when the request has been correct
      history.push("/success_commitment");
    } catch (e) {
      setIsLoader(false);
      setError({
        status: true,
        message:
          "Vaya, estamos teniendo problemas de conexiÃ³n al enviar tus datos, intenta de nuevo",
      });
      console.log(`ðŸ˜± Axios request failed: ${e}`);
    }
  };

  return (
    <Fragment>
      <WrapperContainer>
        <Form>
          <Title>Estas a unos pasos de cambiar tu entorno</Title>
          <Information>
            Â¡EstÃ¡s un paso mÃ¡s cerca de contribuir a un MÃ©xico de
            #MillonesdeAgentesdeCambio! Con tu impacto y proyecciones a futuro
            puedes impulsar a mÃ¡s personas a cambiar su realidad.
          </Information>
          <h3>Datos generales</h3>
          <WrapperField>
            <Field>
              <Label>
                Nombre(s) <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="firstName"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.firstName}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                Apellido(s) <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="lastName"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.lastName}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                OrganizaciÃ³n <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="organization"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.organization}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                Sector(s) <TxtRequired>*</TxtRequired>
              </Label>
              <Select
                name="sector"
                value={commitment.sector}
                onChange={handleOnChange}
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
              >
                <option value="">-- Seleccione --</option>
                {sector.map((item, idx) => {
                  return (
                    <option value={item} key={idx}>
                      {item}
                    </option>
                  );
                })}
              </Select>
            </Field>
            <Field>
              <Label>
                Ciudad <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="city"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.city}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                Estado <TxtRequired>*</TxtRequired>
              </Label>
              <Select
                name="state"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.state}
                onChange={handleOnChange}
              >
                <option value="">-- Seleccione --</option>
                {states.map((item, idx) => {
                  return (
                    <option value={item} key={idx}>
                      {item}
                    </option>
                  );
                })}
              </Select>
            </Field>
            <Field>
              <Label>
                Cargo <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="position"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.position}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                Correo electronico <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="email"
                name="email"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.email}
                onChange={handleOnChange}
              />
            </Field>
            <Field>
              <Label>
                Telefono <TxtRequired>*</TxtRequired>
              </Label>
              <Input
                type="text"
                name="phone"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.phone}
                onChange={handleOnChange}
              />
            </Field>
          </WrapperField>
          <Field>
            <Label>
              Breve descripciÃ³n de tu proyecto/iniciativa/emprendimiento{" "}
              <TxtRequired>*</TxtRequired>
            </Label>
            <TextArea
              name="question1"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              value={commitment.question1}
              onChange={handleOnChange}
            />
          </Field>
          <Field>
            <Label>
              Redes sociales de tu proyecto/iniciativa/emprendimiento{" "}
              <TxtRequired>*</TxtRequired>
            </Label>
            <TextArea
              name="question2"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              value={commitment.question2}
              onChange={handleOnChange}
            />
          </Field>
          <Field>
            <Label style={{ width: "30em" }}>
              Logo <TxtRequired>*</TxtRequired>
            </Label>
            <input
              type="file"
              name="logo"
              id="imglogo"
              onChange={onChangeHandlerLogo}
              style={{ display: "none" }}
            />
            <LabelFile for="imglogo">
              {" "}
              {commitment.logo ? commitment.logo : "Selecciona una imagen"}{" "}
            </LabelFile>
          </Field>
          <Field>
            <Label style={{ width: "30em" }}>
              Adjunte una fotografÃ­a que refle tu impacto{" "}
              <TxtRequired>*</TxtRequired>
            </Label>
            <input
              type="file"
              name="img"
              accept="image/png, .jpeg, .jpg"
              id="imgimpacto"
              onChange={onChangeHandlerImg}
              style={{ display: "none" }}
            />
            <LabelFile for="imgimpacto">
              {" "}
              {commitment.img ? commitment.img : "Selecciona una imagen"}{" "}
            </LabelFile>
          </Field>
          <h3>Construye tu compromiso</h3>
          <Information>
            A continuaciÃ³n, queremos saber mÃ¡s sobre tu compromiso con este
            movimiento. Tu compromiso debe hacer referencia a una acciÃ³n nueva o
            expandida, medible y especÃ­fica que tÃº, tu instituciÃ³n o socios,
            estÃ©n tomando para apoyar la activaciÃ³n o el equipamiento de mÃ¡s
            agentes de cambio.
          </Information>
          <WrapperSuggestion>
            <WrapperTextInput>
              <Input
                type="text"
                placeholder="La organizaciÃ³n A,(junto a la B)"
                name="question3"
                onFocus={() => {
                  addStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.question3}
                onChange={handleOnChange}
              />{" "}
              se compromete a impactar a{" "}
              <Input
                type="text"
                placeholder="# de agentes "
                name="question7"
                onFocus={() => {
                  addStyle(
                    "suggestion2",
                    "suggestion1",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.question7}
                onChange={handleOnChange}
                style={{ width: "130px" }}
              />{" "}
              con su programa, durante{" "}
            </WrapperTextInput>
            <WrapperTextSuggestion>
              <WrapperSpan1 style={{ marginRight: "10px" }} id="suggestion1">
                <SpanText>
                  {
                    "(Ejemplo: Ashoka MÃ©xico, CentroamÃ©rica y el Caribe, CEMEX y el TecnolÃ³gico de Monterrey)"
                  }
                </SpanText>
              </WrapperSpan1>
              <WrapperSpan2 style={{ marginLeft: "50%" }} id="suggestion2">
                <SpanText>
                  {
                    "(Se va a impactar a 36 lÃ­deres agentes de cambio de manera directa)"
                  }
                </SpanText>
              </WrapperSpan2>
            </WrapperTextSuggestion>
            <WrapperTextInput>
              <Input
                type="text"
                placeholder="periodo de tiempo"
                name="question5"
                onFocus={() => {
                  addStyle(
                    "suggestion3",
                    "suggestion2",
                    "suggestion1",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={commitment.question5}
                onChange={handleOnChange}
                style={{ width: "150px" }}
              />{" "}
              para contribuir a la comunidad de Agentes de cambio, a travÃ©s de{" "}
            </WrapperTextInput>
            <WrapperTextSuggestion>
              <WrapperSpan3 style={{ width: "27%" }} id="suggestion3">
                <SpanText>{"(Ejemplo: enero a octubre de 2020)"}</SpanText>
              </WrapperSpan3>
            </WrapperTextSuggestion>
            <WrapperTextArea>
              <TextArea
                placeholder="Â¿cÃ³mo el impacto esperado contribuye a los demÃ¡s actores?"
                name="question6"
                onFocus={() => {
                  addStyle(
                    "suggestion4",
                    "suggestion2",
                    "suggestion3",
                    "suggestion1",
                    "suggestion5"
                  );
                }}
                value={commitment.question6}
                onChange={handleOnChange}
                style={{ width: "100%", height: "40px" }}
              />
            </WrapperTextArea>
            <WrapperTextSuggestion>
              <WrapperSpan4 style={{ width: "100%" }} id="suggestion4">
                <SpanText>
                  {
                    "(Fortalecer y conectar a lÃ­deres innovadores sociales de todo el mundo, con la finalidad de aumentar su impacto y que ellos puedan replicar el conocimiento adquirido en sus contextos.)"
                  }
                </SpanText>
              </WrapperSpan4>
            </WrapperTextSuggestion>
          </WrapperSuggestion>
          <Field>
            <Label>
              Â¿QuÃ© acciÃ³n se va a implementar? <TxtRequired>*</TxtRequired>
            </Label>
            <TextArea
              name="question4"
              onFocus={() => {
                addStyle(
                  "suggestion5",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion1"
                );
              }}
              value={commitment.question4}
              onChange={handleOnChange}
            />
          </Field>
          <WrapperTextSuggestion>
            <WrapperSpan5 style={{ width: "100%" }} id="suggestion5">
              <SpanText>
                {
                  "(Ejemplo: CodiseÃ±o y lanzamiento de la convocatoria del Premio CEMEX-TEC con un Bootcamp de emprendimiento social y cambio sistÃ©mico para los ganadores)"
                }
              </SpanText>
            </WrapperSpan5>
          </WrapperTextSuggestion>

          <Field>
            <Label>
              Selecciona el Ã¡rea de tu compromiso <TxtRequired>*</TxtRequired>
            </Label>
            <Select
              name="area"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              style={{ width: "61em" }}
              value={commitment.area}
              onChange={handleOnChange}
            >
              <option value="">-- Seleccione --</option>
              {area.map((item, idx) => {
                return (
                  <option value={item} key={idx}>
                    {item}
                  </option>
                );
              })}
            </Select>
          </Field>

          <Field>
            <Label>
              Â¿De quÃ© manera Ashoka y su red pueden ayudarte a escalar el
              impacto de tu compromiso? <TxtRequired>*</TxtRequired>
            </Label>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-1"
                onFocus={() => {
                  removeStyle(
                    "suggestion1",
                    "suggestion2",
                    "suggestion3",
                    "suggestion4",
                    "suggestion5"
                  );
                }}
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              VinculaciÃ³n con actores clave
            </WrapperInputRadio>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-2"
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              Herramientas y metodologÃ­as para impulsar la innovaciÃ³n social y
              la agencia de cambio
            </WrapperInputRadio>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-3"
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              AsesorÃ­as especializadas
            </WrapperInputRadio>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-4"
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              Fondos para escalar la iniciativa
            </WrapperInputRadio>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-5"
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              DifusiÃ³n y comunicaciÃ³n
            </WrapperInputRadio>
            <WrapperInputRadio>
              <InputRadio
                type="checkbox"
                name="8-6"
                value={true}
                onChange={handleOnChangeQuestion8}
              />{" "}
              Otro
            </WrapperInputRadio>
          </Field>
          <Field>
            <Label>
              En caso de tener una necesidad distinta a estos, favor de
              especificarlo a continuaciÃ³n:
            </Label>
            <TextArea
              name="question9"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              value={commitment.question9}
              onChange={handleOnChange}
            />
          </Field>
          <Field>
            <Label>
              Â¿CÃ³mo te enteraste de #MillonesdeAgentesdeCambio?{" "}
              <TxtRequired>*</TxtRequired>
            </Label>
            <Select
              name="question10"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              style={{ width: "61em" }}
              value={commitment.question10}
              onChange={handleOnChange}
            >
              <option value="">-- Seleccione --</option>
              {socialNetworks.map((item, idx) => {
                return (
                  <option value={item} key={idx}>
                    {item}
                  </option>
                );
              })}
            </Select>
          </Field>
          <Field>
            <Label>
              En caso de colocar otro o si quieres especificar, favor de
              especificarlo a continuaciÃ³n
            </Label>
            <TextArea
              name="question11"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              value={commitment.question11}
              onChange={handleOnChange}
            />
          </Field>
          <Field>
            <Label>Comentario o Duda Adicional</Label>
            <TextArea
              name="question12"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              value={commitment.question12}
              onChange={handleOnChange}
            />
          </Field>
          <WrapperInputRadio>
            <InputRadio
              type="checkbox"
              name="sendEmails"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              checked={commitment.sendEmails}
              onChange={() =>
                setCommitment({
                  ...commitment,
                  sendEmails: !commitment.sendEmails,
                })
              }
            />{" "}
            Me gustarÃ­a recibir actualizaciones y noticias por correo
            electrÃ³nico sobre Ashoka.
          </WrapperInputRadio>
          <WrapperInputRadio>
            <InputRadio
              type="checkbox"
              name="agree"
              onFocus={() => {
                removeStyle(
                  "suggestion1",
                  "suggestion2",
                  "suggestion3",
                  "suggestion4",
                  "suggestion5"
                );
              }}
              checked={commitment.agree}
              onChange={() =>
                setCommitment({ ...commitment, agree: !commitment.agree })
              }
            />{" "}
            Acepto que mi compromiso sea compartido pÃºblicamente y que mi nombre
            y direcciÃ³n de correo electrÃ³nico sean compartidos con otras
            personas que se comprometan.
          </WrapperInputRadio>
          <Information>
            Al enviar este formulario, usted reconoce que sus datos personales
            se procesarÃ¡n fuera del EEE tal como descrito en la{" "}
            <Url
              href="https://www.ashoka.org/es/privacy-policy"
              target="_blank"
            >
              PolÃ­tica de Privacidad
            </Url>
            .
          </Information>

          <BtnSend
            title="Comprometerme"
            size="40%"
            type="primary-loader"
            onClick={validateData}
            loader={isLoader}
          />

          <Information>
            *Si tu compromiso es aprobado, la informaciÃ³n que proporciones para
            los campos requeridos puede ser utilizada para compartir el
            compromiso pÃºblicamente. Por favor, no incluyas ninguna informaciÃ³n
            privada o confidencial.
          </Information>
          <Information>
            Nota: Se pueden presentar mÃºltiples compromisos por organizaciÃ³n. El
            LÃ­der para cada compromiso debe ser la persona que completa este
            formulario. El responsable del compromiso actuarÃ¡ como punto de
            contacto oficial de Ashoka en relaciÃ³n con este y deberÃ¡ ser capaz
            de aprobar cualquier texto que se comparta pÃºblicamente sobre este
            compromiso.
          </Information>
        </Form>
      </WrapperContainer>
      <Snackbar
        open={error.status}
        autoHideDuration={6000}
        onClose={handleClose}
      >
        <Alert onClose={handleClose} severity="error">
          {error.message}
        </Alert>
      </Snackbar>
    </Fragment>
  );
};

export default NewCommitment;
